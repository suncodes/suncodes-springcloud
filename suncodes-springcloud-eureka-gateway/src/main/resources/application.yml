server:
  port: 9527

spring:
  application:
    name: eureka-gateway

#客户端注册进eureka服务列表内
eureka:
  client:
    service-url:
      defaultZone: http://${eureka-hostname}:${eureka-port[0]}/eureka/,http://${eureka-hostname}:${eureka-port[1]}/eureka/,http://${eureka-hostname}:${eureka-port[2]}/eureka/
  instance:
    instance-id: eureka-gateway-9527
    prefer-ip-address: true

eureka-hostname: localhost
eureka-port: [7001,7002,7003]

---
#spring:
#  cloud:
#    gateway:
#      routes:
#        - id: provider-8001
#          uri: http://localhost:8001
#          predicates:
#            - Path=/dept/**
#        - id: baidu
#          uri: http://www.baidu.com
#          predicates:
#          - Path=/**

---
spring:
  cloud:
    gateway:
      routes:
        - id: provider-800X
          uri: lb://provider
          predicates:
            - Path=/dept/**

---
#spring:
#  cloud:
#    gateway:
#      routes:
#        - id: provider-8001-01
#          uri: http://localhost:8001
#          predicates:
#            - Path=/provider01/**
#          filters:
#            - name: CircuitBreaker
#              args:
#                name: providerCircuitBreaker-01
#                fallbackUri: forward:/provider-fallback
##            - RewritePath=/provider01, /yml
##            - RewritePath=/provider01/.*, /yml/.*
#            - RewritePath=/provider01/?(?<segment>.*), /yml/$\{segment}
#
#resilience4j:
#  circuitbreaker:
#    configs:
#      default:
#        failureRateThreshold: 30 #失败请求百分比，超过这个比例，CircuitBreaker变为OPEN状态
#        slidingWindowSize: 10 #滑动窗口的大小，配置COUNT_BASED,表示10个请求，配置TIME_BASED表示10秒
#        minimumNumberOfCalls: 5 #最小请求个数，只有在滑动窗口内，请求个数达到这个个数，才会触发CircuitBreader对于断路器的判断
#        slidingWindowType: TIME_BASED #滑动窗口的类型
#        permittedNumberOfCallsInHalfOpenState: 3 #当CircuitBreaker处于HALF_OPEN状态的时候，允许通过的请求个数
#        automaticTransitionFromOpenToHalfOpenEnabled: true #设置true，表示自动从OPEN变成HALF_OPEN，即使没有请求过来
#        waitDurationInOpenState: 2s #从OPEN到HALF_OPEN状态需要等待的时间
#    #        recordExceptions: #异常名单
#    #        - java.lang.Exception
#    instances:
#      backendA:
#        baseConfig: default #熔断器backendA，继承默认配置default
#      backendB:
#        failureRateThreshold: 50 #失败请求百分比，超过这个比例，CircuitBreaker变为OPEN状态
#        slowCallDurationThreshold: 2s #慢调用时间阈值，高于这个阈值的呼叫视为慢调用，并增加慢调用比例。
#        slowCallRateThreshold: 30 #慢调用百分比阈值，断路器把调用时间大于slowCallDurationThreshold，视为慢调用，当慢调用比例大于阈值，断路器打开，并进行服务降级
#        slidingWindowSize: 10
#        slidingWindowType: TIME_BASED
#        minimumNumberOfCalls: 2
#        permittedNumberOfCallsInHalfOpenState: 2
#        waitDurationInOpenState: 120s #从OPEN到HALF_OPEN状态需要等待的时间

---
spring:
  cloud:
    gateway:
      routes:
      - id: provider-8001-01
        uri: http://localhost:8001
        predicates:
        - Path=/provider01/**
        filters:
#        - name: Hystrix
        - name: CircuitBreaker
          args:
            # 此名称和自定义的配置id要相同
            name: providerCircuitBreaker-01
            fallbackUri: forward:/provider-fallback
        #            - RewritePath=/provider01, /yml
        #            - RewritePath=/provider01/.*, /yml/.*
        - RewritePath=/provider01/?(?<segment>.*), /yml/$\{segment}

#hystrix:
#  circuitBreaker:   #熔断器相关配置
#    requestVolumeThreshold: 10     #熔断器失败的个数，进入熔断器的请求达到1000时服务降级（之后的请求直接进入熔断器）
#    sleepWindowInMilliseconds: 5000  #所以此配置的作用是指定熔断器打开后多长时间内允许一次请求尝试执行，官方默认配置为5秒。
#    errorThresholdPercentage: 50     #窗口时间内超过50%的请求失败后就会打开熔断器将后续请求快速失败掉,默认配置为50

resilience4j.circuitbreaker:
  configs:
    default:
      register-health-indicator: true
      sliding-window-size: 10
      minimum-number-of-calls: 5
      permitted-number-of-calls-in-half-open-state: 3
      automatic-transition-from-open-to-half-open-enabled: true
      wait-duration-in-open-state: 10s
      failure-rate-threshold: 50
      slow-call-rate-threshold: 50
      slow-call-duration-threshold: 60000ms
      recordExceptions:
      - java.lang.IllegalArgumentException
      - org.springframework.web.client.HttpServerErrorException
      - java.io.IOException
      - java.lang.Exception
      - java.net.UnknownHostException
      - org.springframework.web.reactive.function.client.WebClientResponseException
      - org.springframework.web.reactive.function.client.WebClientResponseException$NotFound
      - org.springframework.web.client.HttpClientErrorException$NotFound
      - java.net.ConnectException
      - io.netty.channel.AbstractChannel$AnnotatedConnectException


      ignoreExceptions:
      - java.lang.IllegalStateException
  instances:
    backendA:
      baseConfig: default
logging:
  level:
    io.github.resilience4j: DEBUG

---
#spring:
#  cloud:
#    circuitbreaker:
#      resilience4j:
#        enabled: false